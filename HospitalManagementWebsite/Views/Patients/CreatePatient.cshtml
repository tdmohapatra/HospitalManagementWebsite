@using HospitalManagementWebsite.Models
@model PatientViewModel

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Patient Registration</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        .container {
            max-width: 900px;
            margin: 20px auto;
            background: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }

        form {
            display: flex;
            flex-wrap: wrap;
            gap: 20px;
        }

        .form-group {
            flex: 1 1 45%;
            display: flex;
            flex-direction: column;
        }

        .form-group label {
            margin-bottom: 5px;
            font-weight: bold;
        }

        .form-group input, .form-group select {
            padding: 10px;
            font-size: 16px;
            border: 1px solid #ccc;
            border-radius: 5px;
        }

        .form-group small {
            color: red;
            font-size: 12px;
        }

        .btn-submit {
            background-color: #007bff;
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s;
            width: 100%;
        }

        .btn-submit:hover {
            background-color: #0056b3;
        }

        .location-info {
            margin-top: 20px;
            font-size: 14px;
            color: red;
        }

        @@media (max-width: 768px) {
            .form-group {
                flex: 1 1 100%;
            }
        }
    </style>
</head>
<body>

    <div class="container">
        <h1 style="margin-left:25%">Patient Registration Form</h1>

        <div class="form-group">
            <label for="longitude">Location:<span id="location-icon" title="Fetching location..."></span></label>
        </div>

        @using (Html.BeginForm())
        {
            <form enctype="multipart/form-data">
                <div class="form-group">
                    <label for="Fname">First Name:</label>
                    @Html.TextBoxFor(x => x.Fname, new { @id = "Fname" })
                    <small>@Html.ValidationMessageFor(x => x.Fname)</small>
                </div>

                <div class="form-group">
                    <label for="Lname">Last Name:</label>
                    @Html.TextBoxFor(x => x.Lname, new { @id = "Lname" })
                    <small>@Html.ValidationMessageFor(x => x.Lname)</small>
                </div>

                <div class="form-group">
                    <label for="Age">Age:</label>
                    @Html.TextBoxFor(x => x.Age, new { @id = "Age" })
                    <small>@Html.ValidationMessageFor(x => x.Age)</small>
                </div>

                <div class="form-group">
                    <label for="Bg">Blood Group:</label>
                    @Html.DropDownListFor(x => x.Bg, Model.bloodGroup, new { @id = "Bg" })
                </div>

                <div class="form-group">
                    <label for="genderId">Gender:</label>
                    @Html.DropDownListFor(x => x.genderId, Model.getgenderlist, new { @id = "genderId" })
                </div>

                <div class="form-group">
                    <label for="email">Email:</label>
                    @Html.TextBoxFor(x => x.email, new { @id = "email" })
                    <small>@Html.ValidationMessageFor(x => x.email)</small>
                </div>

                <div class="form-group">
                    <label for="phoneNo">Phone Number:</label>
                    @Html.TextBoxFor(x => x.phoneNo, new { @id = "phoneNo" })
                </div>

                <div class="form-group">
                    <label for="Zipcode">Pin Code:</label>
                    @Html.TextBoxFor(x => x.Zipcode, new { @id = "Zipcode" })
                </div>

                <div class="form-group">
                    <label for="Country">Country:</label>
                    @Html.TextBoxFor(x => x.Country, new { @id = "Country" })
                </div>

                <div class="form-group">
                    <label for="State">State:</label>
                    @Html.TextBoxFor(x => x.State, new { @id = "State" })
                </div>

                <div class="form-group">
                    <label for="City">City:</label>
                    @Html.TextBoxFor(x => x.City, new { @id = "City" })
                </div>

                <!-- Attachments Field -->
                <div class="form-group">
                    <label for="attachments">Attachments (PDF, Excel, JPG, PNG, JPEG):</label>
                    <input type="file" name="attachments" id="attachments" onchange="validateFile()" accept=".pdf,.xls,.xlsx,.jpg,.jpeg,.png" />
                    <small>Max file size: 2MB</small>
                </div>

                <!-- Submit Button -->
                <div class="form-group">
                    <button type="submit" class="btn-submit">Submit</button>
                </div>
            </form>
        }
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const locationIcon = document.getElementById('location-icon');
            const countryInput = document.getElementById('Country');
            const stateInput = document.getElementById('State');
            const cityInput = document.getElementById('City');
            const zipcodeInput = document.getElementById('Zipcode');

            function updateLocationIcon(status, title) {
                locationIcon.style.display = 'inline-block';
                locationIcon.style.width = '5px';
                locationIcon.style.height = '5px';
                locationIcon.style.borderRadius = '50%';
                locationIcon.style.marginLeft = '10px';
                locationIcon.style.cursor = 'pointer';
                locationIcon.title = title;

                if (status === 'success') {
                    locationIcon.style.backgroundColor = '#66ff33';
                } else {
                    locationIcon.style.backgroundColor = 'red';
                }
            }

            if (navigator.geolocation) {
                if (confirm("Do you allow us to fetch your location?")) {
                    navigator.geolocation.getCurrentPosition(async (position) => {
                        const latitude = position.coords.latitude;
                        const longitude = position.coords.longitude;

                        updateLocationIcon('success', `Latitude: ${latitude}, Longitude: ${longitude}`);

                        try {
                            const response = await fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${latitude}&lon=${longitude}`);
                            const data = await response.json();

                            if (data && data.address) {
                                countryInput.value = data.address.country || "Country not available";
                                stateInput.value = data.address.state || "State not available";
                                cityInput.value = data.address.city || data.address.town || "City not available";
                                zipcodeInput.value = data.address.postcode || "Zip Code not available";
                            } else {
                                alert('Address details not found in response.');
                                updateLocationIcon('error', 'Unable to fetch location details.please provide those details manually.');
                            }
                        } catch (error) {
                            console.error('Error:', error);
                            alert('An error occurred while fetching location details, please provide those details manually.');
                            updateLocationIcon('error', 'Error fetching location details.');
                        }
                    }, (error) => {
                        console.error(error);
                        alert('Unable to fetch location.');
                        updateLocationIcon('error', 'Error: Unable to fetch location.please provide those details manually.');
                    });
                }
            } else {
                alert('Geolocation is not supported by your browser.please provide those details manually.');
                updateLocationIcon('error', 'Geolocation not supported.');
            }
        });
    </script>

    <script>
        function validateFile() {
            var fileInput = document.getElementById("attachments");
            var file = fileInput.files[0];

            // Validate file size (2MB max)
            if (file.size > 2 * 1024 * 1024) { // 2MB
                alert("File size must be less than 2MB.");
                fileInput.value = ""; // Clear the file input
            }

            // Validate file type
            var allowedExtensions = ['pdf', 'xls', 'xlsx', 'jpg', 'jpeg', 'png'];
            var fileExtension = file.name.split('.').pop().toLowerCase();

            if (!allowedExtensions.includes(fileExtension)) {
                alert("Invalid file type. Please upload a PDF, Excel, JPG, PNG, or JPEG file.");
                fileInput.value = ""; // Clear the file input
            }
        }
    </script>

</body>
</html>
