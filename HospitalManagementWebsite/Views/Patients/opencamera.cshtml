


<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml">
<head runat="server">
    <title>Profile with Camera</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f5f5f5;
            margin: 0;
            padding: 0;
        }

        .container {
            max-width: 800px;
            margin: 20px auto;
            padding: 20px;
            background-color: #fff;
            border-radius: 10px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            display: flex;
        }

        .section {
            flex: 1;
            margin-right: 20px;
        }

            .section h2, .section h3, .section h4, .section h5 {
                color: #333;
                margin: 0;
                padding-bottom: 5px;
                border-bottom: 1px solid #ddd;
            }

        .subsection {
            margin-top: 10px;
        }

        .button {
            padding: 5px 10px;
            border: none;
            background-color: #007bff;
            color: white;
            border-radius: 2px;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

            .button:hover {
                background-color: #0056b3;
            }

        .camera-container {
            display: flex;
            flex-direction: column;
            align-items: center;
            margin-top: 20px;
        }

        #video {
            width: 320px;
            height: 240px;
            border-radius: 5px;
            box-shadow: 0 0 5px rgba(0, 0, 0, 0.3);
            margin-bottom: 10px;
        }

        .captured-images {
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
            margin-top: 20px;
        }

        .captured-image {
            width: 80px;
            height: 60px;
            border-radius: 5px;
            margin: 5px;
            cursor: pointer;
            transition: transform 0.3s ease;
        }

            .captured-image:hover {
                transform: scale(1.1);
            }

        .display-image {
            max-width: 100%;
            border-radius: 36px;
            box-shadow: 0 0 5px rgba(0, 0, 0, 0.3);
            margin-top: 40px;
        }

        .display-image-container {
            text-align: center;
            margin-top: 20px;
        }

        .display-image-options button {
            margin-top: 10px;
        }
    </style>
</head>
<body>
    <form id="form1" runat="server">
        <div class="container">
            <div class="section">
                <h2>Profile with Camera</h2>
                <div id="divprofilePic"> </div>
                <div class="subsection">
                    <h3>Camera Features</h3>
                    <div class="camera-container">
                        @*<video id="video" playsinline autoplay controls style="display: none;"></video>*@
                        <video id="video" playsinline autoplay style="display: none;"></video>

                        <video id="video" style="display: none;"></video>

                        <div class="button-container">
                            <button class="button" type="button" onclick="requestCameraAccess()">Open Camera</button>
                            <button class="button" type="button" id="close-camera" style="display: none;" onclick="closeCamera()">Close Camera</button>
                            <button class="button" type="button" id="capture-image" style="display: none;" onclick="capturePhoto()">Capture Photo</button>
                        </div>
                    </div>
                </div>
                <div class="subsection">
                    <h3>Clicked Photo Gallery</h3>
                    <div class="captured-images" id="imageContainer"></div>
                </div>
            </div>
            <div class="section">
                <div class="display-image-container" id="displayImageContainer" style="display: none;">
                    <h3>Image Preview</h3>

                    <img id="displayImage" class="display-image" src="" alt="Captured Image" />
                    <div class="display-image-options">
                        <button class="button" onclick="downloadDisplayImage(event)">Select Photo</button>
                        <button class="button" onclick="closeselectedImage(event)">Close Camera</button>

                    </div>
                </div>
            </div>
        </div>
    </form>
    <script>
        // Global variables to store video element and media stream
        let videoElement;
        let mediaStream;

        // Function to request access to the camera
        function requestCameraAccess() {
            // Show the video element
            document.getElementById('video').style.display = 'block';
            // Get user media stream
            navigator.mediaDevices.getUserMedia({ video: true })
                .then(stream => {
                    // Keep track of the stream
                    mediaStream = stream;
                    // Get the video element and set its source to the stream
                    videoElement = document.getElementById('video');
                    videoElement.srcObject = stream;
                    videoElement.play();
                    // Show buttons to close camera and capture image
                    document.getElementById('close-camera').style.display = 'inline-block';
                    document.getElementById('capture-image').style.display = 'inline-block';
                })
                .catch(error => {
                    console.error('Error accessing camera:', error);
                });
        }

        // Function to close the camera and stop the media stream
        function closeCamera() {
            if (mediaStream) {
                // Stop all tracks in the media stream
                mediaStream.getTracks().forEach(track => track.stop());
                // Hide the video element
                document.getElementById('video').style.display = 'none';
                // Hide buttons to close camera and capture image
                document.getElementById('close-camera').style.display = 'none';
                document.getElementById('capture-image').style.display = 'none';
            }
        }

        // Function to capture a photo from the video stream
        function capturePhoto() {
            // Create a canvas element
            const canvas = document.createElement('canvas');
            const video = document.getElementById('video');
            // Set canvas dimensions to match the video frame
            canvas.width = video.videoWidth;
            canvas.height = video.videoHeight;
            // Draw the video frame onto the canvas
            canvas.getContext('2d').drawImage(video, 0, 0, canvas.width, canvas.height);
            // Convert the canvas to base64 data URL (image)
            const imageData = canvas.toDataURL('image/jpeg');
            // Create an image element
            const image = document.createElement('img');
            image.src = imageData;
            image.className = 'captured-image'; // Add class for styling
            // Add click event listener to the captured image
            image.addEventListener('click', function () {
                // Display the clicked image in the display image container
                document.getElementById('displayImage').src = imageData;
                document.getElementById('displayImageContainer').style.display = 'block';
            });
            // Append the captured image to the container
            document.getElementById('imageContainer').appendChild(image);
        }

        // Function to download the displayed image
        function downloadDisplayImage(event) {
            // Get the source of the displayed image
            const displayImageSrc = event.target.parentNode.previousElementSibling.src;
            // Create a temporary link element
            const tempLink = document.createElement('a');
            // Set the href and download attributes
            tempLink.href = displayImageSrc;
            tempLink.download = 'displayed_image.jpg';
            // Simulate a click on the link to start downloading
            tempLink.click();
            // Revoke the object URL to free up memory
            URL.revokeObjectURL(tempLink.href);
        }

        // Function to close the selected image
        function closeSelectedImage(event) {
            // Get the parent container of the clicked image
            const container = event.target.parentNode;

            // Remove the clicked image
            container.removeChild(event.target);

            // Get the close button associated with the clicked image
            const closeButton = container.querySelector('.close-button');

            // Remove the close button
            container.removeChild(closeButton);

        }


    </script>
    <script>
    </script>

</body>
</html>
