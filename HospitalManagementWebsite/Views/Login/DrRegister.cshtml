@using HospitalManagementWebsite.Models
@model DoctorRegistration

<!DOCTYPE html>
<html lang="en">
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Doctor Registration</title>


    <style>
        .reg-container {
            width: 100%;
            max-width: 600px;
            background-color: #fff;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            padding: 20px;
            box-sizing: border-box;
            margin-left: 25%;
        }

        .reg-profile-img-preview {
            width: 100px;
            height: 100px;
            border-radius: 8px;
            object-fit: cover;
            margin-top: 10px;
        }

        .reg-error-message {
            color: red;
            font-size: 12px;
            display: none;
        }

        .form-label {
            font-weight: bold;
        }

        .input-group {
            display: flex;
            align-items: center;
        }

        .input-group .form-control {
            flex: 1;
        }

        .input-group i {
            margin-right: 10px;
        }

        .password-container {
            position: relative;
        }

        /* Responsive Styles */
        @@media (max-width: 600px) {
            .reg-container {
                width: 100%;
                padding: 15px;
            }

            .reg-profile-img-preview {
                width: 80px;
                height: 80px;
            }

            .reg-checkbox-group {
                flex-direction: column;
                align-items: flex-start;
            }
        }
    </style>
</head>
<body>
    <div class="reg-container">
        @using (Html.BeginForm())
        {
            <h2 class="text-center mb-4"> Registration</h2>

            <!-- Dialog Box -->
            <dialog id="myDialog">
                <p>Please fill in all the details correctly.</p>
                <button id="closeBtn" class="btn btn-primary">Close</button>
            </dialog>

            <div class="mb-3 input-group">
                <label for="Id" class="form-label">ID:</label>
                <i class="bi bi-person-fill"></i>
                @Html.TextBoxFor(x => x.Id, new { @class = "form-control" })
            </div>

            <div class="mb-3 input-group">
                <label for="Name" class="form-label">Full Name:</label>
                <i class="bi bi-person"></i>
                @Html.TextBoxFor(x => x.Name, new { @class = "form-control" })
                @Html.ValidationMessageFor(x => x.Name, "", new { @class = "text-danger" })
            </div>

            <div class="mb-3 input-group">
                <label for="Email" class="form-label">Email:</label>
                <i class="bi bi-envelope-fill"></i>
                @Html.TextBoxFor(x => x.Email, new { @class = "form-control" })
                @Html.ValidationMessageFor(x => x.Email, "", new { @class = "text-danger" })
            </div>

            <div class="mb-3 password-container input-group">
                <label for="Password" class="form-label">Password:</label>
                <i class="bi bi-lock-fill"></i>
                @Html.PasswordFor(x => x.Password, new { @class = "form-control", id = "Password" })
                @Html.ValidationMessageFor(x => x.Password, "", new { @class = "text-danger" })
                <span id="eye-icon" onclick="togglePasswordVisibility('Password')">
                    <i class="bi bi-eye"></i>
                </span>
            </div>

            <div class="mb-3 password-container input-group">
                <label for="PasswordRecheck" class="form-label">Recheck Password:</label>
                <i class="bi bi-lock-fill"></i>
                <input type="password" id="PasswordRecheck" class="form-control" />
                <span id="eye-icon-recheck" onclick="togglePasswordVisibility('PasswordRecheck')">
                    <i class="bi bi-eye"></i>
                </span>
                <div id="password-mismatch" class="text-danger" style="display:none;">Passwords do not match.</div>
            </div>

            <div class="mb-3 input-group">
                <label for="Mob" class="form-label">Mobile:</label>
                <i class="bi bi-phone-fill"></i>
                @Html.TextBoxFor(x => x.Mob, new { @class = "form-control" })
            </div>

            <div class="mb-3 input-group">
                <label for="Department" class="form-label">Department:</label>
                <i class="bi bi-building"></i>
                @Html.TextBoxFor(x => x.Department, new { @class = "form-control" })
                @Html.ValidationMessageFor(x => x.Department, "", new { @class = "text-danger" })
            </div>

            <div class="mb-3 input-group">
                <label for="Designation" class="form-label">Designation:</label>
                <i class="bi bi-briefcase-fill"></i>
                <input type="text" class="form-control" />
            </div>

            <!-- Profile Photo Field -->
            <div class="mb-3">
                <label for="ProfilePhoto" class="form-label">Profile Photo:</label>
                <input type="file" id="ProfilePhoto" name="ProfilePhoto" class="form-control" accept="image/*" onchange="previewImage()" />
                <img id="profile-img-preview" class="reg-profile-img-preview" style="display:none;" />
                <div id="error-message" class="reg-error-message"></div>
            </div>

            <div class="mb-3 form-check">
                <input type="checkbox" class="form-check-input" id="termsCheckbox" required />
                <label class="form-check-label" for="termsCheckbox">I agree to the <a href="#">terms and conditions</a>.</label>
            </div>

            <div class="mb-3">
                <button type="submit" class="btn btn-primary btn-block" onclick="showDialog()">REGISTER</button>
            </div>

            <div class="mb-3 text-center">
                <a href="@Url.Action("Login", "Login")" class="btn btn-success btn-lg rounded shadow">
                    <i class="bi bi-arrow-left"></i> Go back to LogIn Page
                </a>
            </div>
        }
    </div>

    <script>
        // Image preview function
        function previewImage() {
            const file = document.getElementById('ProfilePhoto').files[0];
            const errorMessage = document.getElementById('error-message');
            const preview = document.getElementById('profile-img-preview');
            const maxFileSize = 1 * 1024 * 1024; // 1 MB

            if (file) {
                // Check if file is an image
                if (!file.type.startsWith('image/')) {
                    errorMessage.textContent = 'Please upload a valid image file.';
                    errorMessage.style.display = 'block';
                    preview.style.display = 'none';
                    return;
                }

                // Check file size
                if (file.size > maxFileSize) {
                    errorMessage.textContent = 'File size must be less than 1 MB.';
                    errorMessage.style.display = 'block';
                    preview.style.display = 'none';
                    return;
                }

                // Create an image object to load the file
                const img = new Image();
                img.onload = function () {
                    // Determine the smaller dimension (width or height) to make a square crop
                    const size = Math.min(img.width, img.height);

                    // Create a canvas element to draw the cropped image
                    const canvas = document.createElement('canvas');
                    const ctx = canvas.getContext('2d');

                    // Set the canvas width and height to the smaller dimension (to make it square)
                    canvas.width = size;
                    canvas.height = size;

                    // Calculate the starting point for cropping the image (center the crop)
                    const x = (img.width - size) / 2;
                    const y = (img.height - size) / 2;

                    // Draw the cropped image onto the canvas
                    ctx.drawImage(img, x, y, size, size, 0, 0, size, size);

                    // Get the cropped image as a base64 URL
                    const croppedImageURL = canvas.toDataURL('image/jpeg');

                    // Display the cropped image in the preview
                    preview.style.display = 'block';
                    preview.src = croppedImageURL;
                    errorMessage.style.display = 'none'; // Hide any previous error messages
                };

                // Read the image file
                img.src = URL.createObjectURL(file);
            }
        }

        // Function to toggle password visibility
        function togglePasswordVisibility(id) {
            const passwordField = document.getElementById(id);
            const eyeIcon = document.getElementById(id === "Password" ? "eye-icon" : "eye-icon-recheck");
            if (passwordField.type === "password") {
                passwordField.type = "text";
                eyeIcon.innerHTML = '<i class="bi bi-eye-slash"></i>'; // Change to "eye-slash" icon
            } else {
                passwordField.type = "password";
                eyeIcon.innerHTML = '<i class="bi bi-eye"></i>'; // Change back to "eye" icon
            }
        }

        // Function to check if passwords match
        document.getElementById('PasswordRecheck').addEventListener('input', function () {
            const password = document.getElementById('Password').value;
            const recheckPassword = document.getElementById('PasswordRecheck').value;
            const mismatchMessage = document.getElementById('password-mismatch');

            if (password !== recheckPassword) {
                mismatchMessage.style.display = 'block';
            } else {
                mismatchMessage.style.display = 'none';
            }
        });

        // Function to show dialog box
        function showDialog() {
            const dialog = document.getElementById('myDialog');
            dialog.showModal();
        }

        // Close dialog box when "close" button is clicked
        const closeBtn = document.getElementById('closeBtn');
        closeBtn.addEventListener('click', () => {
            const dialog = document.getElementById('myDialog');
            dialog.close();
        });
    </script>

</body>
</html>
